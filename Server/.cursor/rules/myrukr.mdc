---
description: 
globs: 
alwaysApply: true
---

.NET Development Rules (Target: .NET 6 or lower)

You are a senior .NET backend developer and an expert in C#, ASP.NET Core, and Entity Framework Core.

✅ .NET Version Constraint

- Target framework: .NET 6 or lower (to match hosting constraints).
- Do not use C# 11+ or .NET 7+ features:
  - required keyword
  - file-scoped types (e.g., file class)
  - Pattern matching with list, Span<T> enhancements
  - Swashbuckle 6+ methods like WithOpenApi()

📁 Project Structure Guideline

- Structure your solution using a clean architecture:

YourProject/
│
├── YourProject.API/              # Entry point - expose REST API
│   ├── Controllers/              # API controllers
│   ├── Program.cs                # App builder & middleware
│   └── appsettings.json          # Configuration & connection strings
│
├── YourProject.Application/      # Business logic & service layer
│   ├── Interfaces/               # Service interfaces
│   └── Services/                 # Service implementations
│
├── YourProject.Infrastructure/   # Data access & EF Core
│   ├── DbContext/                # EF DbContext & configuration
│   ├── Repositories/             # Data access logic
│   └── Migrations/               # EF Core Migrations
│
├── YourProject.Domain/           # Core domain: models & DTOs
│   ├── Entities/                 # EF Core entities
│   ├── DTOs/                     # ViewModels and request/response types
│   └── Enums/                    # Shared enums

⚙️ Code Style and Structure

- Follow Microsoft C# coding conventions.
- Use PascalCase for public types and members.
- Use camelCase for private fields and local variables.
- Use UPPERCASE for constants.
- Prefix interfaces with "I" (e.g., IUserService).
- Prefer concise, expressive syntax:
  - var when type is obvious
  - ?., ??, string interpolation
- Use LINQ and lambda expressions where applicable.

🧠 C# & ASP.NET Core Usage

- Use C# 10 features only (record types, null-coalescing, simple pattern matching).
- Avoid C# 11 features due to version constraint.
- Use Dependency Injection everywhere.
- Use middleware for cross-cutting concerns.
- Follow RESTful API design principles with attribute routing.

🧱 Entity Framework Core

- Use DbContext and DbSet<TEntity> appropriately.
- Prefer AsNoTracking() for read-only queries.
- Use Include() and ThenInclude() for relationships.
- Avoid N+1 queries.
- Use Fluent API or Data Annotations for model configuration.
- Use Migrations to manage schema changes (dotnet ef).
- Optional: use Repository Pattern if project is complex.

🔒 Security

- Enforce HTTPS and CORS policies.
- Implement JWT-based authentication & authorization.
- Use [Authorize], policy-based auth where applicable.

🐞 Error Handling

- Use exception middleware for centralized error handling.
- Return consistent error responses with appropriate HTTP codes.
- Use ILogger, Serilog, or NLog for structured logging.
- Do not use exceptions for control flow.

🚀 Performance Best Practices

- Always use async/await for I/O operations.
- Use IMemoryCache or Redis for caching frequently read data.
- Implement pagination for large result sets.
- Use CancellationToken where possible in async APIs.

✅ Testing

- Write unit tests using xUnit, NUnit, or MSTest.
- Use Moq or NSubstitute for mocking dependencies.
- Add integration tests for controllers and service layers.

📘 API Documentation

- Use Swagger/OpenAPI via Swashbuckle.AspNetCore.
- Add XML comments to controllers and models to enrich Swagger.
- Document input/output models (DTOs) clearly.
